//+------------------------------------------------------------------+
//|                                          Sonic_Dragon.mqh        |
//+------------------------------------------------------------------+

class CSonicDragon
{
private:
    // Buffers và variables
    double DragonHighBuffer[];
    double DragonLowBuffer[];
    double DragonMidBuffer[];
    double DragonHighFillBuffer[];
    double DragonLowFillBuffer[];
    double DragonCenterBuffer[];
    double TrendBuffer[];
    
    int dragonPeriod;
    int trendPeriod;
    int maPeriod;
    
    int dragonHighHandle;
    int dragonLowHandle;
    int dragonMidHandle;
    int trendHandle;
    int maHandle;
    
    // Thêm biến theo dõi Chart Scale
    int chartScale;
    int lineWidth;

public:
    // Constructor
    CSonicDragon()
    {
        chartScale = -1;
        lineWidth = 2;
    }
    
    // Phương thức cập nhật Chart Scale
    void UpdateChartScale(int scale)
    {
        if(chartScale != scale)
        {
            chartScale = scale;
            // Điều chỉnh độ rộng đường vẽ dựa trên Chart Scale
            if(chartScale == 0) lineWidth = 1;
            else if(chartScale == 1 || chartScale == 2) lineWidth = 2;
            else if(chartScale == 3) lineWidth = 3;
            else if(chartScale == 4) lineWidth = 4;
            else lineWidth = 5;
        }
    }

    int Init(int buffer_start, int dragPeriod, int trndPeriod, int maPer,
             color highColor, color lowColor, color midColor, 
             color fillColor, color trendColor)
    {
        dragonPeriod = dragPeriod;
        trendPeriod = trndPeriod;
        maPeriod = maPer;
        
        int idx = buffer_start;
        
        // Thiết lập buffers
        SetIndexBuffer(idx++, DragonHighBuffer, INDICATOR_DATA);
        SetIndexBuffer(idx++, DragonLowBuffer, INDICATOR_DATA);
        SetIndexBuffer(idx++, DragonMidBuffer, INDICATOR_DATA);
        SetIndexBuffer(idx++, DragonHighFillBuffer, INDICATOR_DATA);
        SetIndexBuffer(idx++, DragonLowFillBuffer, INDICATOR_DATA);
        SetIndexBuffer(idx++, DragonCenterBuffer, INDICATOR_DATA);
        SetIndexBuffer(idx++, TrendBuffer, INDICATOR_DATA);
        
        // Khởi tạo Chart Scale nếu chưa có
        if(chartScale == -1)
        {
            long chartScaleValue;
            if(ChartGetInteger(0, CHART_SCALE, 0, chartScaleValue))
                chartScale = (int)chartScaleValue;
            else
                chartScale = 3; // Giá trị mặc định
                
            // Cập nhật độ rộng đường vẽ dựa trên Chart Scale
            UpdateChartScale(chartScale);
        }
        
        // Thiết lập plots
        PlotIndexSetInteger(buffer_start, PLOT_DRAW_TYPE, DRAW_LINE);
        PlotIndexSetInteger(buffer_start, PLOT_LINE_COLOR, highColor);
        PlotIndexSetInteger(buffer_start, PLOT_LINE_WIDTH, lineWidth);
        PlotIndexSetString(buffer_start, PLOT_LABEL, "Dragon High");
        
        PlotIndexSetInteger(buffer_start+1, PLOT_DRAW_TYPE, DRAW_LINE);
        PlotIndexSetInteger(buffer_start+1, PLOT_LINE_COLOR, lowColor);
        PlotIndexSetInteger(buffer_start+1, PLOT_LINE_WIDTH, lineWidth);
        PlotIndexSetString(buffer_start+1, PLOT_LABEL, "Dragon Low");
        
        PlotIndexSetInteger(buffer_start+2, PLOT_DRAW_TYPE, DRAW_LINE);
        PlotIndexSetInteger(buffer_start+2, PLOT_LINE_COLOR, midColor);
        PlotIndexSetInteger(buffer_start+2, PLOT_LINE_WIDTH, lineWidth);
        PlotIndexSetString(buffer_start+2, PLOT_LABEL, "Dragon Mid");
        
        PlotIndexSetInteger(buffer_start+3, PLOT_DRAW_TYPE, DRAW_FILLING);
        PlotIndexSetInteger(buffer_start+3, PLOT_LINE_COLOR, fillColor);
        
        PlotIndexSetInteger(buffer_start+4, PLOT_DRAW_TYPE, DRAW_FILLING);
        PlotIndexSetInteger(buffer_start+4, PLOT_LINE_COLOR, fillColor);
        
        PlotIndexSetInteger(buffer_start+5, PLOT_DRAW_TYPE, DRAW_LINE);
        PlotIndexSetInteger(buffer_start+5, PLOT_LINE_COLOR, fillColor);
        PlotIndexSetInteger(buffer_start+5, PLOT_LINE_WIDTH, 1);
        
        PlotIndexSetInteger(buffer_start+6, PLOT_DRAW_TYPE, DRAW_LINE);
        PlotIndexSetInteger(buffer_start+6, PLOT_LINE_COLOR, trendColor);
        PlotIndexSetInteger(buffer_start+6, PLOT_LINE_WIDTH, lineWidth);
        PlotIndexSetString(buffer_start+6, PLOT_LABEL, "Trend Line");
        
        // Khởi tạo indicator handles
        dragonHighHandle = iMA(Symbol(), 0, dragonPeriod, 0, MODE_EMA, PRICE_HIGH);
        dragonLowHandle = iMA(Symbol(), 0, dragonPeriod, 0, MODE_EMA, PRICE_LOW);
        dragonMidHandle = iMA(Symbol(), 0, dragonPeriod, 0, MODE_EMA, PRICE_CLOSE);
        trendHandle = iMA(Symbol(), 0, trendPeriod, 0, MODE_EMA, PRICE_CLOSE);
        maHandle = iMA(Symbol(), 0, maPeriod, 0, MODE_SMA, PRICE_CLOSE);
        
        return idx;
    }
    
    void Calculate(const int rates_total, const int prev_calculated, const int limit,
                 const datetime& time[], const double& open[], 
                 const double& high[], const double& low[], const double& close[])
    {
        // Kiểm tra handles đã sẵn sàng chưa
        if(dragonHighHandle == INVALID_HANDLE || dragonLowHandle == INVALID_HANDLE || 
           dragonMidHandle == INVALID_HANDLE || trendHandle == INVALID_HANDLE || 
           maHandle == INVALID_HANDLE)
            return;
        
        // Lấy dữ liệu từ các indicators
        double dragonHigh[], dragonLow[], dragonMid[], trend[], ma[];
        
        CopyBuffer(dragonHighHandle, 0, 0, rates_total, dragonHigh);
        CopyBuffer(dragonLowHandle, 0, 0, rates_total, dragonLow);
        CopyBuffer(dragonMidHandle, 0, 0, rates_total, dragonMid);
        CopyBuffer(trendHandle, 0, 0, rates_total, trend);
        CopyBuffer(maHandle, 0, 0, rates_total, ma);
        
        // Tính toán các giá trị
        for(int i = 0; i < limit; i++)
        {
            DragonHighBuffer[i] = dragonHigh[i];
            DragonLowBuffer[i] = dragonLow[i];
            DragonMidBuffer[i] = dragonMid[i];
            DragonHighFillBuffer[i] = dragonHigh[i];
            DragonLowFillBuffer[i] = dragonMid[i];
            DragonCenterBuffer[i] = dragonMid[i];
            TrendBuffer[i] = trend[i];
        }
    }
};
