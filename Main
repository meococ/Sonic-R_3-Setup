//+------------------------------------------------------------------+
//|                                             Sonic R Advanced EA |
//|                                                                  |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "Sonic R Advanced EA"
#property link      ""
#property version   "2.00"
#property strict

// Include Trade class for MQL5
#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>
#include <Trade\OrderInfo.mqh>
#include <Trade\SymbolInfo.mqh>

//+------------------------------------------------------------------+
//| COMPATIBILITY LAYER - MQL4/MQL5                                   |
//+------------------------------------------------------------------+

// Operation types
#define OP_BUY 0
#define OP_SELL 1

// Symbol info properties
#define MODE_TICKVALUE SYMBOL_TRADE_TICK_VALUE
#define MODE_LOTSTEP SYMBOL_VOLUME_STEP
#define MODE_MINLOT SYMBOL_VOLUME_MIN
#define MODE_MAXLOT SYMBOL_VOLUME_MAX
#define MODE_SPREAD SYMBOL_SPREAD
#define MODE_POINT SYMBOL_POINT

// Order selection
#define MODE_TRADES 0
#define SELECT_BY_POS 0
#define SELECT_BY_TICKET 1

// MA methods
#define MODE_SMA 0     // Simple moving average
#define MODE_EMA 1     // Exponential moving average
#define MODE_SMMA 2    // Smoothed moving average
#define MODE_LWMA 3    // Linear weighted moving average

// Series modes for iHighest/iLowest
#define MODE_OPEN ENUM_SERIESMODE::MODE_OPEN
#define MODE_HIGH ENUM_SERIESMODE::MODE_HIGH
#define MODE_LOW ENUM_SERIESMODE::MODE_LOW
#define MODE_CLOSE ENUM_SERIESMODE::MODE_CLOSE

// Price type enums
enum ENUM_MQL4_APPLIED_PRICE
{
   MQL4_PRICE_OPEN = 0,    // Open price
   MQL4_PRICE_CLOSE = 1,   // Close price
   MQL4_PRICE_HIGH = 2,    // High price
   MQL4_PRICE_LOW = 3,     // Low price
   MQL4_PRICE_MEDIAN = 4,  // Median price (high+low)/2
   MQL4_PRICE_TYPICAL = 5, // Typical price (high+low+close)/3
   MQL4_PRICE_WEIGHTED = 6 // Weighted price (high+low+close+close)/4
};

// Định nghĩa lại các hằng số để sử dụng giá trị enum mới
#define PRICE_OPEN ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_OPEN
#define PRICE_CLOSE ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_CLOSE
#define PRICE_HIGH ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_HIGH
#define PRICE_LOW ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_LOW  
#define PRICE_MEDIAN ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_MEDIAN
#define PRICE_TYPICAL ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_TYPICAL
#define PRICE_WEIGHTED ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_WEIGHTED

// Hằng số cho ánh xạ MQL4 -> MQL5 price types
#define SYS_PRICE_OPEN ENUM_APPLIED_PRICE::PRICE_OPEN
#define SYS_PRICE_CLOSE ENUM_APPLIED_PRICE::PRICE_CLOSE
#define SYS_PRICE_HIGH ENUM_APPLIED_PRICE::PRICE_HIGH
#define SYS_PRICE_LOW ENUM_APPLIED_PRICE::PRICE_LOW
#define SYS_PRICE_MEDIAN ENUM_APPLIED_PRICE::PRICE_MEDIAN
#define SYS_PRICE_TYPICAL ENUM_APPLIED_PRICE::PRICE_TYPICAL
#define SYS_PRICE_WEIGHTED ENUM_APPLIED_PRICE::PRICE_WEIGHTED

//+------------------------------------------------------------------+
//| GLOBAL VARIABLES - Organized by functionality                     |
//+------------------------------------------------------------------+

// Market data variables
double g_point = 0.0001;         // Point value adjusted for digits
double g_daily_high = 0;         // Daily high price
double g_daily_low = 0;          // Daily low price
double g_normal_spread = 0;      // Normal spread value for anomaly detection
double g_5min_high = 0;          // 5-minute high
double g_5min_low = 0;           // 5-minute low

// Technical indicators
double g_dragon_mid = 0;         // EMA Dragon middle value
double g_dragon_high = 0;        // EMA Dragon high value
double g_dragon_low = 0;         // EMA Dragon low value
double g_trend = 0;              // Trend indicator value
double g_ema89 = 0;              // EMA 89 value for trailing stop
double g_ma = 0;                 // MA value

// Account status
double g_session_start_balance = 0;  // Session start balance for drawdown calculation
double g_week_start_balance = 0;     // Weekly start balance for drawdown calculation
datetime g_day_start_time = 0;       // Day start time for daily stats

// Position tracking
int g_total_buy = 0;             // Total buy positions
int g_total_sell = 0;            // Total sell positions

// News and market anomaly data
bool g_news_active = false;      // Is news period active
int g_news_impact = 0;           // News impact level
datetime g_last_news_time = 0;   // Last news event time
bool g_market_anomaly_detected = false;  // Market anomaly detection flag
datetime g_last_anomaly_time = 0;        // Last anomaly detected time

// Scout position building
bool g_mm_bullish = false;        // MM (Market Makers) bullish flag
int g_scout_positions_count = 0;  // Count of Scout positions
double g_scout_tp_levels[3];      // Scout take profit levels
bool g_tp2_hit = false;           // TP2 hit flag

// Multi-timeframe analysis
datetime g_last_mtf_analysis = 0; // Last multi-timeframe analysis time
bool g_mtf_bullish_d1 = false;    // D1 timeframe bullish
bool g_mtf_bullish_h4 = false;    // H4 timeframe bullish
bool g_mtf_bullish_h1 = false;    // H1 timeframe bullish

// News event structures
struct NewsEvent
{
   string title;     // News title
   string currency;  // Currency affected
   datetime time;    // News time
   int impact;       // Impact level (1-3)
};

NewsEvent g_upcoming_news[];     // Array of upcoming news events
int g_news_count = 0;            // Count of news events loaded

// ... existing code ...

//+------------------------------------------------------------------+
//| Wrapper function for MQL4 iMA function                           |
//+------------------------------------------------------------------+
double iMA_MQL4(string symbol, ENUM_TIMEFRAMES timeframe, int period, int ma_shift, 
               int ma_method, ENUM_MQL4_APPLIED_PRICE applied_price, int shift_index)
{
   // Map MQL4 price type to MQL5 ENUM_APPLIED_PRICE
   static ENUM_APPLIED_PRICE price_map[] = {
      SYS_PRICE_OPEN,      // MQL4_PRICE_OPEN
      SYS_PRICE_CLOSE,     // MQL4_PRICE_CLOSE
      SYS_PRICE_HIGH,      // MQL4_PRICE_HIGH
      SYS_PRICE_LOW,       // MQL4_PRICE_LOW
      SYS_PRICE_MEDIAN,    // MQL4_PRICE_MEDIAN
      SYS_PRICE_TYPICAL,   // MQL4_PRICE_TYPICAL
      SYS_PRICE_WEIGHTED   // MQL4_PRICE_WEIGHTED
   };
   
   // Validate applied_price index to prevent array out-of-bounds
   int price_index = (int)applied_price;
   if(price_index < 0 || price_index > 6) {
      Print("iMA_MQL4: Invalid applied_price value: ", applied_price, ", using PRICE_CLOSE");
      price_index = (int)MQL4_PRICE_CLOSE;
   }
   
   // Create indicator handle
   int handle = ::iMA(symbol, timeframe, period, ma_shift, (ENUM_MA_METHOD)ma_method, price_map[price_index]);
   if(handle == INVALID_HANDLE) {
      Print("Error creating MA indicator: ", GetLastError());
      return 0;
   }
   
   // Copy indicator data
   double ma[];
   if(CopyBuffer(handle, 0, shift_index, 1, ma) <= 0) {
      Print("Error copying MA data: ", GetLastError());
      return 0;
   }
   
   return ma[0];
}

//+------------------------------------------------------------------+
//| Wrapper function for MQL4 iHighest function                      |
//+------------------------------------------------------------------+
int iHighest_MQL4(string symbol, ENUM_TIMEFRAMES timeframe, ENUM_MQL4_APPLIED_PRICE price_type, int count, int start)
{
   // Map MQL4 price type to MQL5 ENUM_SERIESMODE
   static ENUM_SERIESMODE mode_map[] = {
      MODE_OPEN,    // MQL4_PRICE_OPEN
      MODE_CLOSE,   // MQL4_PRICE_CLOSE
      MODE_HIGH,    // MQL4_PRICE_HIGH
      MODE_LOW,     // MQL4_PRICE_LOW
      MODE_OPEN,    // MQL4_PRICE_MEDIAN (fallback)
      MODE_OPEN,    // MQL4_PRICE_TYPICAL (fallback)
      MODE_OPEN     // MQL4_PRICE_WEIGHTED (fallback)
   };
   
   // Validate price_type index to prevent array out-of-bounds
   int mode_index = (int)price_type;
   if(mode_index < 0 || mode_index > 6) {
      Print("iHighest_MQL4: Invalid price_type value: ", price_type, ", using MODE_HIGH");
      return iHighest(symbol, timeframe, MODE_HIGH, count, start);
   }
   
   // Handle special price types that don't have direct mapping
   if(mode_index >= 4) {
      Print("iHighest_MQL4: Complex price types not directly supported, using MODE_HIGH");
      return iHighest(symbol, timeframe, MODE_HIGH, count, start);
   }
   
   return iHighest(symbol, timeframe, mode_map[mode_index], count, start);
}

//+------------------------------------------------------------------+
//| Wrapper function for MQL4 iLowest function                       |
//+------------------------------------------------------------------+
int iLowest_MQL4(string symbol, ENUM_TIMEFRAMES timeframe, ENUM_MQL4_APPLIED_PRICE price_type, int count, int start)
{
   // Map MQL4 price type to MQL5 ENUM_SERIESMODE
   static ENUM_SERIESMODE mode_map[] = {
      MODE_OPEN,    // MQL4_PRICE_OPEN
      MODE_CLOSE,   // MQL4_PRICE_CLOSE
      MODE_HIGH,    // MQL4_PRICE_HIGH
      MODE_LOW,     // MQL4_PRICE_LOW
      MODE_OPEN,    // MQL4_PRICE_MEDIAN (fallback)
      MODE_OPEN,    // MQL4_PRICE_TYPICAL (fallback)
      MODE_OPEN     // MQL4_PRICE_WEIGHTED (fallback)
   };
   
   // Validate price_type index to prevent array out-of-bounds
   int mode_index = (int)price_type;
   if(mode_index < 0 || mode_index > 6) {
      Print("iLowest_MQL4: Invalid price_type value: ", price_type, ", using MODE_LOW");
      return iLowest(symbol, timeframe, MODE_LOW, count, start);
   }
   
   // Handle special price types that don't have direct mapping
   if(mode_index >= 4) {
      Print("iLowest_MQL4: Complex price types not directly supported, using MODE_LOW");
      return iLowest(symbol, timeframe, MODE_LOW, count, start);
   }
   
   return iLowest(symbol, timeframe, mode_map[mode_index], count, start);
}

// ... existing code ...

//+------------------------------------------------------------------+
//| Improved PVSRA Analysis with caching and performance optimizations |
//+------------------------------------------------------------------+
int AnalyzePVSRA(ENUM_TIMEFRAMES timeframe)
{
   if(!UsePVSRA) return 0; // 0 = Neutral, 1 = Bulls, -1 = Bears
   
   // Cache results for better performance
   static int last_result = 0;
   static datetime last_update_time = 0;
   static ENUM_TIMEFRAMES last_timeframe = PERIOD_CURRENT;
   
   // Only update PVSRA analysis on new bar or different timeframe request
   datetime current_bar_time = iTime(Symbol(), timeframe, 0);
   if(last_timeframe == timeframe && last_update_time == current_bar_time && last_update_time != 0)
   {
      return last_result;
   }
   
   // Update cache tracking
   last_update_time = current_bar_time;
   last_timeframe = timeframe;
   
   // Optimize volume data retrieval by using a single array access
   double volumes[10];
   double closes[10];
   double avg_volume = 0;
   
   // Optimization: Get all volumes in one go with CopyTickVolume
   if(CopyTickVolume(Symbol(), timeframe, 0, 10, volumes) <= 0)
   {
      Print("Error getting volume data: ", GetLastError());
      return 0; // Return neutral on error
   }
   
   // Get price data in one go for better performance
   if(CopyClose(Symbol(), timeframe, 0, 10, closes) <= 0)
   {
      Print("Error getting price data: ", GetLastError());
      return 0; // Return neutral on error
   }
   
   // Calculate average volume efficiently
   for(int i = 0; i < 10; i++)
   {
      avg_volume += volumes[i];
   }
   avg_volume /= 10.0;
   
   // Current price metrics
   double current_price = closes[0];
   double prev_price = closes[1];
   double volume_ratio = volumes[0] / (avg_volume > 0 ? avg_volume : 1); // Avoid divide by zero
   
   // Calculate support/resistance levels
   double whole_number = MathFloor(current_price);
   double half_number = whole_number + 0.5;
   
   // Distance to nearest SR level
   double dist_to_whole = MathAbs(current_price - whole_number);
   double dist_to_half = MathAbs(current_price - half_number);
   
   // Determine the nearest SR level
   double sr_threshold = 0.0020;
   bool near_sr_level = (dist_to_whole < sr_threshold || dist_to_half < sr_threshold);
   
   // Calculate price volatility for comparison
   double high_3 = iHigh(Symbol(), timeframe, ArrayMaximum(closes, 0, 3));
   double low_3 = iLow(Symbol(), timeframe, ArrayMinimum(closes, 0, 3));
   double volatility = high_3 - low_3;
   
   int result = 0; // Default neutral
   
   // Enhanced detection logic with volatility context
   if(near_sr_level)
   {
      // Volume climax at support with price moving up = bulls
      if(volume_ratio > RisingThreshold && current_price > prev_price && 
         (dist_to_whole < dist_to_half && current_price > whole_number))
      {
         result = 1; // Bulls - accumulation at support
      }
      // Volume climax at resistance with price moving down = bears
      else if(volume_ratio > RisingThreshold && current_price < prev_price &&
              (dist_to_half < dist_to_whole && current_price < half_number))
      {
         result = -1; // Bears - distribution at resistance
      }
      // Extremely high volume with SR test = smart money interest
      else if(volume_ratio > ClimaxThreshold)
      {
         // Determine direction based on price action after volume spike
         if(current_price > prev_price) result = 1; // Bulls
         else if(current_price < prev_price) result = -1; // Bears
      }
   }
   
   // Detection for areas away from SR levels based on volatility
   if(result == 0 && volatility > 0)
   {
      // High volume relative to volatility suggests strong interest
      double vol_to_range_ratio = volumes[0] / (volatility * 10000.0);
      
      if(vol_to_range_ratio > 5.0) // Significant volume relative to range
      {
         if(current_price > prev_price) result = 1; // Bulls
         else if(current_price < prev_price) result = -1; // Bears
      }
   }
   
   // Cache result
   last_result = result;
   return result;
}

//+------------------------------------------------------------------+
//| Optimized Position Management with Trailing Stop and Breakeven    |
//+------------------------------------------------------------------+
void ManageOpenPositions()
{
   // Optimize: Use static CTrade instead of creating new objects
   static CTrade trade;
   
   // Pre-declare variables for better performance
   ulong ticket;
   double open_price, current_price, stop_loss, take_profit;
   double profit_pips, new_sl;
   ENUM_POSITION_TYPE position_type;
   
   // Get symbol information once for all calculations
   double point = SymbolInfoDouble(Symbol(), SYMBOL_POINT);
   double ask = SymbolInfoDouble(Symbol(), SYMBOL_ASK);
   double bid = SymbolInfoDouble(Symbol(), SYMBOL_BID);
   string current_symbol = Symbol();
   
   // Process all positions in a single loop
   for(int i = 0; i < PositionsTotal(); i++)
   {
      // Get position ticket
      ticket = PositionGetTicket(i);
      if(ticket == 0 || !PositionSelectByTicket(ticket)) continue;
      
      // Only manage positions for current symbol
      if(PositionGetString(POSITION_SYMBOL) != current_symbol) continue;
      
      // Get position details
      position_type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
      open_price = PositionGetDouble(POSITION_PRICE_OPEN);
      current_price = PositionGetDouble(POSITION_PRICE_CURRENT);
      stop_loss = PositionGetDouble(POSITION_SL);
      take_profit = PositionGetDouble(POSITION_TP);
      
      // Calculate profit in pips
      profit_pips = position_type == POSITION_TYPE_BUY ? 
                   (current_price - open_price) / g_point : 
                   (open_price - current_price) / g_point;
      
      // Break Even Logic
      if(BreakEvenEnabled && profit_pips >= BreakEvenProfit)
      {
         // Set breakeven stop
         new_sl = position_type == POSITION_TYPE_BUY ?
                 open_price + BreakEvenPips * g_point :
                 open_price - BreakEvenPips * g_point;
         
         // Only modify if the new SL is better than current
         bool need_modify = (position_type == POSITION_TYPE_BUY && (stop_loss < new_sl || stop_loss == 0)) ||
                           (position_type == POSITION_TYPE_SELL && (stop_loss > new_sl || stop_loss == 0));
         
         if(need_modify)
         {
            trade.PositionModify(ticket, new_sl, take_profit);
            Print("Breakeven: Ticket ", ticket, ", New SL: ", 
                  DoubleToString(new_sl, _Digits));
         }
      }
      
      // Trailing Stop Logic
      if(UseTrailingStop && profit_pips >= TrailingStart)
      {
         // Calculate appropriate trailing stop
         new_sl = position_type == POSITION_TYPE_BUY ?
                 current_price - TrailingStep * g_point :
                 current_price + TrailingStep * g_point;
         
         // Only modify if the trail is meaningful
         bool need_trail = (position_type == POSITION_TYPE_BUY && stop_loss < new_sl - g_point) ||
                          (position_type == POSITION_TYPE_SELL && (stop_loss > new_sl + g_point || stop_loss == 0));
         
         if(need_trail)
         {
            trade.PositionModify(ticket, new_sl, take_profit);
            Print("Trailing: Ticket ", ticket, ", New SL: ", 
                  DoubleToString(new_sl, _Digits));
         }
      }
      
      // Advanced trailing using EMA89
      if(UseEMA89TrailingStop && g_ema89 > 0)
      {
         if(position_type == POSITION_TYPE_BUY && current_price > g_ema89 && profit_pips > 0)
         {
            // Use EMA89 as trailing stop for buy positions
            new_sl = g_ema89 - 5 * g_point; // 5 pip buffer below EMA
            
            if(stop_loss < new_sl - g_point) // Only trail if improving
            {
               trade.PositionModify(ticket, new_sl, take_profit);
               Print("EMA Trail: Ticket ", ticket, ", New SL: ", 
                     DoubleToString(new_sl, _Digits));
            }
         }
         else if(position_type == POSITION_TYPE_SELL && current_price < g_ema89 && profit_pips > 0)
         {
            // Use EMA89 as trailing stop for sell positions
            new_sl = g_ema89 + 5 * g_point; // 5 pip buffer above EMA
            
            if(stop_loss > new_sl + g_point || stop_loss == 0) // Only trail if improving
            {
               trade.PositionModify(ticket, new_sl, take_profit);
               Print("EMA Trail: Ticket ", ticket, ", New SL: ", 
                     DoubleToString(new_sl, _Digits));
            }
         }
      }
      
      // Manage Scout positions with multiple take profits
      if(UseMultipleTPs && IsScoutPosition((int)ticket))
      {
         int type = position_type == POSITION_TYPE_BUY ? OP_BUY : OP_SELL;
         CheckPartialClose((int)ticket, type, open_price, profit_pips);
      }
   }
}

//+------------------------------------------------------------------+
//| Enhanced Market Anomaly Detection System                          |
//+------------------------------------------------------------------+
bool DetectMarketAnomaly()
{
   // Only check every N seconds to save resources
   static datetime last_check = 0;
   datetime current_time = TimeCurrent();
   
   // Throttle checks to once every 5 seconds
   if(current_time - last_check < 5 && g_market_anomaly_detected == false) 
      return g_market_anomaly_detected;
   
   last_check = current_time;
   
   // If already in anomaly state, check if it has expired
   if(g_market_anomaly_detected && current_time - g_last_anomaly_time > 1800) // 30 minutes
   {
      Print("Market conditions returned to normal after anomaly");
      g_market_anomaly_detected = false;
      return false;
   }
   
   // Check for abnormal spread conditions
   double current_spread = (double)SymbolInfoInteger(Symbol(), SYMBOL_SPREAD) * Point();
   if(current_spread > g_normal_spread * MaxSpreadMultiplier)
   {
      Print("Abnormal spread detected: ", DoubleToString(current_spread / Point(), 1), 
            " pips (normal: ", DoubleToString(g_normal_spread / Point(), 1), " pips)");
      g_market_anomaly_detected = true;
      g_last_anomaly_time = current_time;
      return true;
   }
   
   // Optimize volatility check by using cached price data when possible
   static double last_high = 0, last_low = 0;
   static datetime last_high_low_update = 0;
   
   // Only update high/low every minute to save resources
   if(current_time - last_high_low_update > 60 || last_high == 0 || last_low == 0)
   {
      int highest_idx = iHighest_MQL4(Symbol(), PERIOD_M5, ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_HIGH, 1, 0);
      int lowest_idx = iLowest_MQL4(Symbol(), PERIOD_M5, ENUM_MQL4_APPLIED_PRICE::MQL4_PRICE_LOW, 1, 0);
      
      last_high = iHigh(Symbol(), PERIOD_M5, highest_idx);
      last_low = iLow(Symbol(), PERIOD_M5, lowest_idx);
      last_high_low_update = current_time;
   }
   
   // Calculate range in pips
   double range_5min = (last_high - last_low) / g_point;
   
   // Check for abnormal volatility
   if(range_5min > AbnormalVolatilityPips)
   {
      Print("Abnormal volatility detected: ", DoubleToString(range_5min, 1), 
            " pips in last 5 minutes");
      g_market_anomaly_detected = true;
      g_last_anomaly_time = current_time;
      return true;
   }
   
   // Additional check: unusual tick volume
   double last_volume = iVolume(Symbol(), PERIOD_M1, 0);
   static double avg_volume = 0;
   
   // Initialize or update average volume
   if(avg_volume == 0)
   {
      double volumes[10];
      if(CopyTickVolume(Symbol(), PERIOD_M1, 1, 10, volumes) > 0)
      {
         double sum = 0;
         for(int i = 0; i < 10; i++) sum += volumes[i];
         avg_volume = sum / 10.0;
      }
   }
   else
   {
      // Continuously update the average (10% new value, 90% old value)
      avg_volume = 0.9 * avg_volume + 0.1 * last_volume;
   }
   
   // Check for volume spike
   if(avg_volume > 0 && last_volume > avg_volume * 5.0)
   {
      Print("Abnormal volume spike detected: ", DoubleToString(last_volume, 0), 
            " (avg: ", DoubleToString(avg_volume, 0), ")");
      g_market_anomaly_detected = true;
      g_last_anomaly_time = current_time;
      return true;
   }
   
   return g_market_anomaly_detected;
}

//+------------------------------------------------------------------+
//| Improved Trading Hours Check with Cached Calculations             |
//+------------------------------------------------------------------+
bool IsWithinTradingHours()
{
   if(!LimitTradingHours) return true;
   
   // Cache result to minimize DateTime operations
   static bool last_result = false;
   static datetime last_check_time = 0;
   static int check_interval = 300; // Check every 5 minutes
   
   datetime current_time = TimeCurrent();
   
   // Return cached result if still valid
   if(current_time - last_check_time < check_interval)
      return last_result;
   
   // Update cache time
   last_check_time = current_time;
   
   // Get current hour with timezone consideration
   MqlDateTime dt;
   TimeToStruct(current_time, dt);
   int current_hour = dt.hour;
   
   // Allow trading only during specified hours
   last_result = (current_hour >= TradingStartHour && current_hour < TradingEndHour);
   
   // Additional filters for specific days if needed
   if(last_result && dt.day_of_week == 5) // Friday
   {
      // Maybe limit trading hours on Friday
      if(current_hour >= 16) // After 4 PM on Friday
         last_result = false;
   }
   
   // Check for known high-volume sessions
   bool major_session = false;
   
   // London session (8-16 GMT)
   if(current_hour >= LondonOpenHour && current_hour < LondonOpenHour + SessionOverlapHours)
      major_session = true;
      
   // New York session (13-21 GMT)
   if(current_hour >= NewYorkOpenHour && current_hour < NewYorkOpenHour + SessionOverlapHours)
      major_session = true;
      
   // High-priority override: Always allow during major session overlaps
   if(OnlyTradeMainSessions && !major_session)
      last_result = false;
   
   return last_result;
}

//+------------------------------------------------------------------+
//| Optimized Indicator Update System with Caching                    |
//+------------------------------------------------------------------+
void UpdateIndicators()
{
   static datetime last_update_time = 0;
   static int update_frequency = 2; // Update every 2 seconds
   
   datetime current_time = TimeCurrent();
   
   // Only update when necessary to improve performance
   if(current_time - last_update_time < update_frequency)
      return;
   
   // Calculate price-based EMAs
   
   // Cache indicator handles to avoid repeatedly creating them
   static int dragon_mid_handle = -1;
   static int dragon_high_handle = -1;
   static int dragon_low_handle = -1;
   static int trend_handle = -1;
   static int ma_handle = -1;
   
   // Initialize handles if needed
   if(dragon_mid_handle == -1)
      dragon_mid_handle = iMA(Symbol(), PERIOD_CURRENT, DragonPeriod, 0, MODE_EMA, SYS_PRICE_CLOSE);
   
   if(dragon_high_handle == -1)
      dragon_high_handle = iMA(Symbol(), PERIOD_CURRENT, DragonPeriod, 0, MODE_EMA, SYS_PRICE_HIGH);
   
   if(dragon_low_handle == -1)
      dragon_low_handle = iMA(Symbol(), PERIOD_CURRENT, DragonPeriod, 0, MODE_EMA, SYS_PRICE_LOW);
   
   if(trend_handle == -1)
      trend_handle = iMA(Symbol(), PERIOD_CURRENT, TrendPeriod, 0, MODE_EMA, SYS_PRICE_CLOSE);
   
   if(ma_handle == -1)
      ma_handle = iMA(Symbol(), PERIOD_CURRENT, MAPeriod, 0, MODE_SMA, SYS_PRICE_CLOSE);
   
   // Get data from indicators
   double buffer[1];
   
   if(CopyBuffer(dragon_mid_handle, 0, 0, 1, buffer) > 0)
      g_dragon_mid = buffer[0];
   
   if(CopyBuffer(dragon_high_handle, 0, 0, 1, buffer) > 0)
      g_dragon_high = buffer[0];
   
   if(CopyBuffer(dragon_low_handle, 0, 0, 1, buffer) > 0)
      g_dragon_low = buffer[0];
   
   if(CopyBuffer(trend_handle, 0, 0, 1, buffer) > 0) {
      g_trend = buffer[0];
      g_ema89 = g_trend; // Use the same value for EMA89
   }
   
   if(CopyBuffer(ma_handle, 0, 0, 1, buffer) > 0)
      g_ma = buffer[0];
   
   // Update timestamp
   last_update_time = current_time;
   
   // Count positions (should be done on every tick)
   CountOpenPositions();
}

//+------------------------------------------------------------------+
//| Enhanced Lot Size Calculator with Smart Risk Management           |
//+------------------------------------------------------------------+
double CalculateLotSize(int type)
{
   // Use fixed lot size if auto calculation is disabled
   if(!AutoLotSize)
      return FixedLotSize;
   
   // Calculate risk-based lot size
   double balance = AccountInfoDouble(ACCOUNT_BALANCE);
   double risk_amount = balance * RiskPercent / 100.0;
   
   // Get symbol properties (use cache if available)
   static double tick_value = 0;
   static double tick_size = 0;
   static double min_lot = 0;
   static double max_lot = 0;
   static double lot_step = 0;
   static string last_symbol = "";
   
   // Only update if symbol changes (rare) or first run
   string current_symbol = Symbol();
   if(current_symbol != last_symbol || tick_value == 0)
   {
      tick_value = SymbolInfoDouble(current_symbol, SYMBOL_TRADE_TICK_VALUE);
      tick_size = SymbolInfoDouble(current_symbol, SYMBOL_TRADE_TICK_SIZE);
      min_lot = SymbolInfoDouble(current_symbol, SYMBOL_VOLUME_MIN);
      max_lot = SymbolInfoDouble(current_symbol, SYMBOL_VOLUME_MAX);
      lot_step = SymbolInfoDouble(current_symbol, SYMBOL_VOLUME_STEP);
      last_symbol = current_symbol;
   }
   
   // Pip value in account currency
   double pip_value = tick_value * g_point / tick_size;
   
   // Calculate potential loss in pips
   double potential_loss_pips = StopLoss;
   
   // Account for current market volatility
   static double avg_atr = 0;
   if(avg_atr == 0)
   {
      // Initialize ATR for volatility awareness
      int atr_handle = iATR(current_symbol, PERIOD_CURRENT, 14);
      if(atr_handle != INVALID_HANDLE)
      {
         double atr_buffer[1];
         if(CopyBuffer(atr_handle, 0, 0, 1, atr_buffer) > 0)
            avg_atr = atr_buffer[0] / g_point;
      }
   }
   
   // Adjust risk based on volatility if ATR is available
   if(avg_atr > 0)
   {
      double volatility_ratio = StopLoss / avg_atr;
      
      // Reduce risk in high volatility conditions
      if(volatility_ratio < 0.8) // Tight stop relative to volatility
         risk_amount *= 0.8; // Reduce risk by 20%
      else if(volatility_ratio > 1.5) // Wide stop relative to volatility
         risk_amount *= 1.1; // Increase risk by 10%
   }
   
   // Calculate risk-based position size
   double lots = risk_amount / (potential_loss_pips * pip_value);
   
   // Round to nearest lot step
   lots = MathFloor(lots / lot_step) * lot_step;
   
   // Apply position sizing modifiers based on market conditions
   
   // 1. Reduce size during news periods
   if(NewsFilter && g_news_active && ReduceSizePostNews)
   {
      lots = lots * PostNewsSizePercent / 100.0;
   }
   
   // 2. Adjust size based on win/loss streak (optional enhancement)
   static int consecutive_wins = 0;
   static int consecutive_losses = 0;
   
   // Increase size slightly on win streaks, decrease on loss streaks
   if(consecutive_wins > 2)
      lots *= 1.1; // 10% increase after 3 consecutive wins
   else if(consecutive_losses > 1)
      lots *= 0.8; // 20% decrease after 2 consecutive losses
   
   // 3. Prop firm risk controls
   if(PropFirmMode)
   {
      // Calculate exposure percentage
      double current_exposure = 0;
      
      // Iterate through open positions to calculate exposure
      for(int i = 0; i < PositionsTotal(); i++)
      {
         ulong ticket = PositionGetTicket(i);
         if(ticket != 0 && PositionSelectByTicket(ticket))
         {
            if(PositionGetString(POSITION_SYMBOL) == current_symbol)
            {
               double position_lots = PositionGetDouble(POSITION_VOLUME);
               current_exposure += position_lots * potential_loss_pips * pip_value / balance * 100.0;
            }
         }
      }
      
      // Limit new position size if near max exposure
      if(current_exposure + (lots * potential_loss_pips * pip_value / balance * 100.0) > MaxOpenRisk)
      {
         double max_lots = (MaxOpenRisk - current_exposure) * balance / (100.0 * potential_loss_pips * pip_value);
         max_lots = MathFloor(max_lots / lot_step) * lot_step;
         
         if(max_lots < lots)
            lots = max_lots;
      }
   }
   
   // Apply limits
   if(lots < min_lot) lots = min_lot;
   if(lots > max_lot) lots = max_lot;
   
   // Special adjustment for Scout positions
   if(UseScoutPositionBuilding && g_scout_positions_count > 0)
   {
      // Reduce first position size to allow for scaling in
      if(g_scout_positions_count == 0)
         lots *= 0.7; // Start with 70% for first position
   }
   
   return lots;
}
